---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seet61.
--- DateTime: 15.09.19 14:39
---

local json = require('json')
local app = require('http-test.init')
local tap = require('tap')
local db = require('http-test.db')
local log = require('log')
local config = require('http-test.config.main')

local http_client = require('http.client').new({max_connections = 5})
local test = tap.test('http-test_tests')

db.truncate_database()

local key = 'test1'

function get_post_body()
    local body = {}
    body['key'] = key
    local subjson = {}
    subjson['name'] = 'value'
    body['value'] = subjson
    log.debug('body: ' .. json.encode(body))
    return tostring(json.encode(body))
end

function get_put_body()
    local body = {}
    local subjson = {}
    subjson['name'] = 'value123'
    body['value'] = subjson
    return json.encode(body)
end

function test_post_create()
    log.debug('test_post_create')
    local response = http_client:post('http://' .. config.http_host .. ':' .. config.http_port .. '/kv', get_post_body(), {})
    log.debug('test_post_create: ' .. json.encode(response))
    test:is(response.status, 200, 'test_post_create status')
    test:isstring(response.body, 'test_post_create body is string')
end

function test_post_create_again()
    log.debug('test_post_create_again')
    local response = http_client:post('http://' .. config.http_host .. ':' .. config.http_port .. '/kv', get_post_body(), {})
    log.debug('test_post_create_again: ' .. json.encode(response))
    test:is(response.status, 409, 'test_post_create_again status')
    test:isstring(response.body, 'test_post_create_again body is string')
end

function test_put()
    log.debug('test_put')
    local response = http_client:put('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, get_put_body(), {})
    log.debug('test_put: ' .. json.encode(response))
    test:is(response.status, 200, 'test_put status')
    test:isstring(response.body, 'test_put body is string')
end

function test_get()
    log.debug('test_get')
    local response = http_client:get('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, {}, {})
    log.debug('test_get: ' .. json.encode(response))
    test:is(response.status, 200, 'test_get status')
    test:isstring(response.body, 'test_get body is string')
end

function test_delete()
    log.debug('test_delete')
    local response = http_client:delete('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, {}, {})
    log.debug('test_delete: ' .. json.encode(response))
    test:is(response.status, 200, 'test_delete status')
    test:isstring(response.body, 'test_delete body is string')
end

function test_put_not_exist()
    log.debug('test_put_not_exist')
    local response = http_client:put('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, get_put_body(), {})
    log.debug('test_put_not_exist: ' .. json.encode(response))
    test:is(response.status, 404, 'test_put_not_exist status')
    test:isstring(response.body, 'test_put_not_exist body is string')
end

function test_get_not_exist()
    log.debug('test_get_not_exist')
    local response = http_client:get('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, {}, {})
    log.debug('test_get_not_exist: ' .. json.encode(response))
    test:is(response.status, 404, 'test_get_not_exist status')
    test:isstring(response.body, 'test_get_not_exist body is string')
end

function test_delete_not_exist()
    log.debug('test_delete_not_exist')
    local response = http_client:delete('http://' .. config.http_host .. ':' .. config.http_port .. '/kv/' .. key, {}, {})
    log.debug('test_delete_not_exist: ' .. json.encode(response))
    test:is(response.status, 404, 'test_delete_not_exist status')
    test:isstring(response.body, 'test_delete_not_exist body is string')
end

local TEST_CASES = {
    test_post_create,
    test_post_create_again,
    test_put,
    test_get,
    test_delete,
    test_put_not_exist,
    test_get_not_exist,
    test_delete_not_exist,
}

local function run()
    log.debug('start test')
    for test_index = 1, #TEST_CASES do
        TEST_CASES[test_index]()
    end
    log.debug('end tests')
end

run()
os.exit()